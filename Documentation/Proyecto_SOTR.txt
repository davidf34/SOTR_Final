=============================================================================
List of generated methods in project: Proyecto_SOTR

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Led1"      (component BitIO)
   - Led1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Led1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Led1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Led1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - Led1_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "Led_button" (component BitIO)
   - Led_button_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Led_button_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Led_button_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - Led_button_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "Button"    (component BitIO)
   - Button_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "ADC1"      (component ADC)
   - ADC1_Start -This method starts continuous conversion on all channels that are set in the component inspector. When each 
                measurement on all channels has finished the <OnEnd > event may be invoked. This method is not available if the 
                <interrupt service> is disabled and the device doesn't support the continuous mode. Note: If time of 
                measurement is too short and the instruction clock is too slow then the conversion complete interrupt and its 
                handler may cause a system overflow.
   - ADC1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - ADC1_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - ADC1_GetValue8 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                8 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC1_GetChanValue8 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 8 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC1_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - ADC1_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.

Module "PWM"       (component PWM)
   - PWM_SetRatio8 -This method sets a new duty-cycle ratio. Ratio is expressed as an 8-bit unsigned integer number. 0 - FF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer capabilities and on the 
                selected period.
   - PWM_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - FFFF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer possibilities and on 
                the selected period.
   - PWM_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.
   - PWM_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as a 16-bit 
                unsigned integer number. The method is available only if it is not selected list of predefined values in 
                <Starting pulse width> property.

Module "Led2"      (component BitIO)
   - Led2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - Led2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Led2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Led2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - Led2_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "Button_1"  (component BitIO)
   - Button_1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Led_ejemplo" (component BitIO)
   - Led_ejemplo_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - Led_ejemplo_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - Led_ejemplo_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - Led_ejemplo_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - Led_ejemplo_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "MCUC1"     (component McuLibConfig)
   - MCUC1_Init -Driver initialization method
   - MCUC1_Deinit -Driver deinitialization method

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles.
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_Deinit -Driver de-initialization routine

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_ReadBlockGeneric -Read from the device a block with using additional control and flags.
   - GI2C1_ReadAddressWait -Same as ReadAddress, but with an optional wait between the address and read. Read from the device. 
                This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByte -Read a byte from the device. This writes (S+i2cAddr+0), (Sr+i2cAddr+1),(data+P)
   - GI2C1_WriteByte -Write a byte to the device: (S+i2cAddr+0).(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ReadWordAddress8 -Read a word from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteWordAddress8 -Write a word to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_ScanDevice -Checks if a device responds on the bus with an ACK.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_Init -Initializes the driver.

Module "EI2C1"     (component SW_I2C)
   - EI2C1_SendChar -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 0 to the I2C bus and 
                then writes one character (byte) to the bus. The slave address must be specified before by the "SelectSlave" 
                method or in the component initialization section of <Slave address init> property. When working as the SLAVE, 
                this method writes one character (byte) to the bus. If the ERR_NOTAVAIL error code returned, the char is 
                successfully sent to master but the master device responds by an acknowledgement instead of no acknowledgement 
                at the end of transfer. <OnError> event is called in this case.
   - EI2C1_RecvChar -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 1 to the I2C bus and 
                then reads one character (byte) from the bus. The slave address must be specified before by the "SelectSlave" 
                method or in the component initialization section of <Slave address init> property. When working as a SLAVE, 
                this method reads one character (byte) from the bus.
   - EI2C1_SendBlock -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 0 to the I2C bus and 
                then writes the block of characters to the bus. If the component is disabled (by the "Disable" method or 
                initialization), the block is moved to the output buffer if the <Output buffer size> property is different from 
                zero. The content of the output buffer is sent immediately with the stop condition at the end when the 
                component is enabled by the "Enable" method. After the output buffer transmission, the whole output buffer is 
                cleared. The slave address must be specified before by the "SelectSlave" method or in component initialization 
                section of <Slave address init> property. When working as a SLAVE, this method writes block of characters to 
                the bus. If the ERR_NOTAVAIL error code is returned, the whole block is successfully sent to a master but the 
                master device responds by an acknowledgement instead of no acknowledgment sent at the end of the last block 
                byte transfer. <OnError> event is called in this case.
   - EI2C1_RecvBlock -When working as a MASTER, this method writes 7 bits of slave address plus R/W bit = 1 to the I2C bus and 
                then reads the block of characters from the bus. The slave address must be specified before by the 
                "SelectSlave" method or in component initialization section of <Slave address init> property. When working as a 
                SLAVE, this method reads the block of characters from the bus.
   - EI2C1_SendStop -When working as a MASTER, if the <Automatic stop condition> property value is 'no', this method sends a 
                valid stop condition to the serial data line of the I2C bus to terminate the communication on the bus after 
                using send methods. This method is enabled only if the component is in MASTER mode and <Automatic stop 
                condition> property value is 'no'
   - EI2C1_SelectSlave -When working as a MASTER, this method selects a new slave for communication by its slave address value. 
                Any send or receive method are directed to or from the selected device, until a new slave device is selected by 
                this method. If the selected slave uses 10-bit slave addressing, as the parameter 7 bits must be passed, which 
                involves 10-bit addressing (11110XX), including two MSBs of slave address (XX). The second byte of the 10-bit 
                slave address must be sent to the slave as a general character of send methods. This method is available only 
                if the component is in MASTER mode.
   - EI2C1_GetSelected -When working as a MASTER, this method returns the identification address value of the slave, which is 
                currently selected for communication with the master. If the current slave uses 10-bit slave addressing, the 
                method returns the first 7 bits only, which involves 10-bit addressing (11110XX), including two MSBs of the 
                slave address (XX). This method is not able to return the rest value of 10-bit slave address. This method is 
                available only if the component is in MASTER mode.

Module "LCD1"      (component SSD1306)
   - LCD1_GetWidth -Returns the width of the display in pixels (in x direction)
   - LCD1_GetHeight -Returns the height of the display in pixels (in y direction)
   - LCD1_GetLongerSide -Returns the size of the longer side of the display
   - LCD1_GetShorterSide -Returns the size of the shorter side of the display
   - LCD1_PutPixel -Draws a pixel into the display buffer (not on the display).
   - LCD1_Clear -Clears the whole display memory.
   - LCD1_UpdateFull -Updates the whole display from the microcontroller RAM display buffer.
   - LCD1_UpdateRegion -Updates a region of the display. This is only a stub for this display as we are using windowing.
   - LCD1_InitCommChannel -Method to initialize communication to the LCD. Needed if the bus to the LCD is shared with other 
                components and settings are different.
   - LCD1_SetContrast -Sets the display contrast level (default:0x7F)
   - LCD1_SetDisplayClockDiv -Sets the display clock divider (default 0x80). This can be used to affect display refresh rate or 
                to reduce audible noise.
   - LCD1_DisplayOn -Turns the display on or off (sleep)
   - LCD1_DisplayInvert -Used to inverse the display. In normal mode, 1 one in the display RAM is a pixel set and a 0 means 
                pixel clear.
   - LCD1_GetLCD -Method to be called for mutual exclusive access to the LCD
   - LCD1_GiveLCD -Method to be called for mutual exclusive access to the LCD
   - LCD1_SetRowCol -Sets the column and row position, useful for start writing text with PrintString()
   - LCD1_PrintString -Simple low level method printing text to the display. Newline is supported.
   - LCD1_ClearLine -Clear a text line on the display
   - LCD1_Deinit -Driver de-initialization
   - LCD1_Init -Display driver initialization

Module "Cpu"       (component MC9S08PT60_64)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts

===================================================================================
